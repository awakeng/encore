학습 내용

1. 자바 프로그램 구성 요소
	1.1. package - 현 소스를 해당 package로 묶겠다는 선언
	1.2. import - 외부 package 사용하겠다는 선언
	1.3. 자바 클래스 선언구
		class 클래스명{ // 저장 파일명과 대소문자도 일치화
			변수 : 데이터 (option)
			생성자 : 
				- 객체 생성 필수 문법을 제공하는 요소  (essential)
				- 개발자가 직접 코딩하지 않아도 자동 생성
					: 컴파일 시점에 자동 생성
					*주의사항
						- 생성자 또한 여러개를 하나의 클래스에 개발 가능 
						- 컴파일러는 단 하나의 생성자도 존재하지 않을 경우에만 자동 생성
						
						
			메소드 : 데이터 가공  (option)
		}
		
		객체: 데이터를 저장하고 활용하기 위해?
			객체 지향: 참조변수(ex. people)을 통해 관리, people2, people3 등등등
		package
		import
		
		class
			변수
			생성자 객체 생성 필수 문법을 제공하는 요소
			메소드
			
	2. 자바 기본
		2.1 변수
			- 데이터 표현
			2.1.1 위치에 따른 구분
				멤버변수: class {} 바로 하위에 개발
						메모리에 실제 사용 가능하게 생성되는 시점 = 객체 생성시
						소멸시점 : 객체 자체가 메모리에서 소멸(삭제) 시점
						* 객체 생성 시점에 자동으로 기본 값으로 초기화
						(기본 값 = default)
						
				로컬변수: 생성자, 메소드의 ()와 {} 개발(main method)
						메모리에 실제 사용 가능하게 생성되는 시점 : 생성자나 메소드 호출될 때
						소멸시점: 실행된 생성자나 메소드가 종료될 때 자동 삭제
						* 생성자 또는 메소드가 호출뢔서 로컬 변수 메모리가 생성되었다 하더라도 기본값으로 자동 초기화 안 됨.
					
			2.1.2 타입에 따른 구분
				(a) 기본 타입(내장 타입, built in)
					- 타입명이 다 소문자로 되어 있음
					- only 8가지
					- 형태와 사이즈로 구분
						정수(4가지) - byte(8), short(16), int(32), long(64)
							0
						실수(2가지) - float, double
							0.0
						문자 - char(16)
							'\u0000' 유니코드, 전세계 글자 표기법상의 null 의미. 즉, 데이터 없음을 의미.
						논리 - boolean(8)
							false
						
				(b) 참조 타입
					API - library 에서 제공하는 class 또는 interface
						문자열 - String " "
						:js, python - ''or ""
						:sql - ''
						
					사용자 정의 타입 - class 또는 interface 개발하면 이 자체가 하나의 타입 
					
							default: null
					
	3. 용어
		3.1 변수
		3.2 메소드
		3.3 생성자
		3.4 클래스
		3.5 생성자 또는 메소드의 () 소괄호에 선언되는 변수
			- void a(int value)
			- int 타입의 value라는 parameter(매개변수) 또는 argument([매개]인자)
		3.6 기본(primitive)타입
		3.7 참조(reference)타입
		3.8 메소드 반환타입(return type)
		3.9 package 
		3.10 import
		3.11 main() 메소드
					
					
===============

1. 컴파일 하는 명령어: javac file.java
2. 실행: java fie
3. jdk 설치 후 작업: jdk/bin을 path
4. jdk 설치 후 확인 작업: >java -version, >javac
5. *.java
	package 선언구
	import 활용구
		: java.lang
	class 클래스명 { // 첫글자 대문자
		데이터: 변수
		생성자 : 변수들을 실제 메모리상에 사용 가능하게 생성
			== 객체 생성
			개발자가 미구현할 경우 컴파일러에 의해 자동 생성
		기  능: 메소드
	}
	
6. String
	- 참조타입(==객체타입)
	- 문자열, " ", " " 내부적으로 객체 생성
	- 사용 빈도가 높아 편의성 제공
	
7. 객체 생성 문법
	타입 변수명 = new 생성자([..]);
	
8. 타입
	1. 기본 타입
		8가지
		정수형, 실수형, 논리형, 문자형 
		byte, short, int, long - 0
		float, double - 0.0
		boolean - false
		char - '\u0000'		
		
	2. 참조 타입(객체, reference, object..)
		- null
	
9. 변수 타입
	1. 선언 위치 따른 구분
		1. 멤버
			- class { } 구현
			- 객체 생성시 메모리에 생성, 객체 존재 시점에 사용 가능
			- 두가지
				instance  (???)
				static
		2. 로컬
			- 생성자 또는 메소드의 parameter(), {} 구현
			- 생성자 또는 메소드 호출해서 실행 후 종료되면 변수는 소멸
			- temporary, automatic, stack  (????)
			
	2. 타입 따른 구분
		기본, 참조
		
10. 데이터 타입이 사용되는 영역
	1. 변수 타입
	2. 메소드 반환타입
		1. 기본타입
		2. 참조타입  (중요!!)
		3. void
	3. 생성자 메소드의 parameter 타입
	
11. 객체 생성 문법
	1. new -> 생성자하고만 호환 : new 생성자([..]);
	2. "" : String 객체 생성
	
12. 변수, 호출 문법
	1. non-static 변수, 메소드 호출 문법
		1. 객체 생성 필수
		2. 참조 변수로 호출
	2. static 변수, 메소드 문법
		1. class 명으로 변수 혹은
		2. class 명으로 메소드([..]); 호출
		3. 동일한 클래스 내에서는 class명 생략
	3. non-static이지만 예외인 경우
		1. String
		2. array
13. 


=======================================
기본 데이터 타입 8가지를 제외한 나머지 보두는 다 객체다!
객체는 Heap에 저장된다. Heap에 저장된 데이터는 쓰레기가 되면 garbage collector가 수거해 간다.
로컬변수는 stack 공간에 저장
객체는 heap, 로컬은 stack!


static은 자동으로 저장공간 확보? 근데 왜 휘발??


=======================================
**Review

1. 기본 데이터 : 참조 데이터
	8
	byte, short, int, long
	float, double
	boolean
	char
	
2. 선언 위치에 따른 변수
	1. 멤버 변수
		- instance 변수(non-static)
			- 반드시 생성된 객체가 있어야만 사용 가능한 변수
			- object라는 용어 대비, 메모리에 사용 가능하게 생성한 객체를 instance 
		- static 변수
			- 객체 없이도 사용 가능

	2. 로컬 변수
		- 무조건 무조건 무조건 무조건 무조건 stack 공간에 저장
		

3. 메모리 관리
	1. class area(method)
		- *.class 메모리에 적재되는 공간
		- static 변수는 자체적으로 자동 공간 확보(생성)
		   : 차후에 객체 생성시 공유하는 자원
		  
	2. stack
		- 로컬 변수만 저장
		- 자동 관리
		- 시스템 관리 측면에서 자원 절약을 위해 로컬 변수는 영구적인 저장 불가 
	3. heap
		- 객체들만 저장
		- 기본타입 기반의 배열 포함
			int - 기본타입
			int[] - 객체 타입

	