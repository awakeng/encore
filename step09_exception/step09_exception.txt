예외 (exception)

1. 개념
	- 처리 가능한 경미한 에러

2. 필요성
	- 혹여 문제가 생겨도 실행 중지가 아닌 경미한 처리 후 정상 실행인듯하게 유지하기 위함
	
3. 상속 관계
	Exception
		1. 컴파일 계열
			- java.lang.RuntimeException 와 무관한 모든 ~Exception 관련된 로직들은
			반드시 try~catch 블록으로 처리 필수
			
		2. 런타임 계열
			- java.lang.RuntimeException 상속받는 모든 예외 클래스들
			- try~catch는 옵션
			
4. 문법
	1. 예외 처리 문법
		- 발생될 수 도 있는 library들을 사용할 때 처리 로직
		- 문법 1
			try{								//1
				서비스 로직 단 예외 발생 가능성이 있는 코드들	//*
			}catch(발생될수도있는Exception 변수) {
				발생되었을때 처리하는 block
			}
			
		- 문법 2
			try{
				서비스 로직 단 예외 발생 가능성이 있는 코드들
			}catch(발생될수도있는Exception 변수) {
				발생되었을때 처리하는 block	
			}finally {							// 0 or 1			
				예외발생 여부와 무관하게 100% 실행 보장			// 자원 관리 차원!
				자원 반환 로직으로 사용
				가령 DB접속 해제 로직, IO 자원 해제 로직
				
	2. 예외 발생 관련된 문법
		- 본인이 해당 로직 개발시 상황에 따라 발생을 직접할 수 있음
		1. 생성 
			throw new 생성자명([..]);							// Exception 을 선언할 때! "이놈Exception"
		2. 메소드 선언구에 이 exception 발생이 될 수 도 있다는 알림표기		
			throws ~Exception [, ~Exception2] {}								// 선언한 Exception을 사용할 것이라고 선언구에 덧 붙인다.
	
	3. 예외 클래스 자체 개발
		- 상황에 맞는 클래스 이름 자체가 메세지가 되기 때문
		1. 컴파일 계열
			java.lang.Exception 상속
			생성자 두개만 다중 정의
				a. 기본 생성자
				b. String parameter로 선언된 생성자
				
		2. 런타임 계열
			java.lang.RuntimeException 상속
		
5. 생성자 호출 문법
	1. new 생성자명([..]);
	2. super([..]);
		
		