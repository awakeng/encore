상속 및 다형성

1. 필요성 : 개발 생산성 향상 및 코드의 재 사용성
2. 상속 & 다형성
	1. 상속
		속성(데이터)들이 일치되는 이미 존재하는 클래스(super/parent/부모)를 기반으로
		하위 클래스 개발
		
	2. 다형성
		상속이 전제조건
		문법
			상위타입 변수 = 모든 자손객체;
			자손타입 변수 = (자손타입)상위타입변수;
		
3. 문법 및 특징
	1. 상속은 변수와 메소드만 상속
	2. 자식 객체 생성시 생성자 내부에 자동 생성되는 super()로 조상 -> 부모 -> 자식 객체 순으로 생성
		- 부모 객체 생성이 의미하는 것은 상속시킨 멤버 변수들을 메모리상에 사용 가능하게 생성을 의미
	3. 단 자식 클래스만의 멤버는 다형성이 반영된 변수로 access 불가능
	4. 예외 없이 모든 class의 최상위 root : java.lang.Object
		- 11개의 메소드가 모든  class에 자동 상속
		- 필요에 따라 메소드 {} 수정 : 재정의(overriding/override)
			- 반환타입 메소드명 argument 반드시 100% 동일
			- super.  
	5. 상위 클래스는 하나
	6. 문법
		 1. 상속
		 	class  자식클래스 extends 부모클래스명{ }
		 2. 다형성
		 		상위타입 변수 = new 자손([..]);
	7. 모든 객체가 다 수용 가능한 상위 타입
		- Object
		- Object[] : 이 배열에는 모든 객체 타입 저장 가능, 단 8가지 기본 타입만 저장 불가능
		
4. 생각 가지 치기
	1. API 자체를 개발해서 제공하는 개발자 가정
		- 메소드는 늘 어디서든 사용성을 최대로 극대화해서 제공
		- API 개발자는 자바  언어를 사용해서 개발하는 개발자가 어떤 이름의 클래스 예측 불필요
		- 단 객체 타입에만 제약 : void m(Object v){}/Object m(){}
		
				
5. @ [어~, 애~, 어노테이션]
	- 강제적인 설정
	- 장식자
	- 학습된 어노테이션
		1. @Data 
			- lombok library에서 제공
			- 기능 : 멤버 변수의 get/setXxx 메소드 자동생성
		2. @Override	
			- jdk1.5 부터 추가된 설정
			- 재정의 필수, 개발시 안정적인 선행  rule
	
	
	
	
	
	
	
	
	
	
	